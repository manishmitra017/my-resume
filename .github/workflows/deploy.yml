name: Deploy Portfolio to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  NODE_VERSION: '20'

jobs:
  deploy:
    name: Deploy Lambda + S3 + CloudFront
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Package Lambda function
        run: pnpm run package:lambda
        env:
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        working-directory: ./cdk
        run: npm install

      - name: Build CDK
        working-directory: ./cdk
        run: npm run build

      - name: Deploy CDK Stack
        working-directory: ./cdk
        run: npx cdk deploy --require-approval never --outputs-file outputs.json

      - name: Get Stack Outputs
        id: stack-outputs
        working-directory: ./cdk
        run: |
          BUCKET_NAME=$(cat outputs.json | grep -o '"StaticBucketName": "[^"]*"' | cut -d'"' -f4)
          LAMBDA_NAME=$(cat outputs.json | grep -o '"LambdaFunctionName": "[^"]*"' | cut -d'"' -f4)
          DISTRIBUTION_ID=$(cat outputs.json | grep -o '"DistributionId": "[^"]*"' | cut -d'"' -f4)

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Upload static assets to S3
        run: |
          # Sync Next.js static assets
          aws s3 sync .next/static s3://${{ steps.stack-outputs.outputs.bucket_name }}/_next/static \
            --delete \
            --cache-control "public, max-age=31536000, immutable"

          # Sync public assets (images, etc.)
          if [ -d "public" ]; then
            aws s3 sync public s3://${{ steps.stack-outputs.outputs.bucket_name }}/images \
              --delete \
              --cache-control "public, max-age=31536000"
          fi

      - name: Update Lambda function
        run: |
          cd .next-lambda
          zip -r ../lambda-package.zip .
          cd ..

          aws lambda update-function-code \
            --function-name ${{ steps.stack-outputs.outputs.lambda_name }} \
            --zip-file fileb://lambda-package.zip \
            --no-cli-pager

      - name: Wait for Lambda update to complete
        run: |
          aws lambda wait function-updated \
            --function-name ${{ steps.stack-outputs.outputs.lambda_name }}

      - name: Invalidate CloudFront cache
        if: steps.stack-outputs.outputs.distribution_id != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.stack-outputs.outputs.distribution_id }} \
            --paths "/*" \
            --no-cli-pager

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs
          path: cdk/outputs.json
          retention-days: 30

      - name: Print deployment summary
        working-directory: ./cdk
        run: |
          echo "üöÄ Deployment successful!"
          echo ""
          echo "üì¶ Resources deployed:"
          echo "  - S3 Bucket: ${{ steps.stack-outputs.outputs.bucket_name }}"
          echo "  - Lambda Function: ${{ steps.stack-outputs.outputs.lambda_name }}"
          echo "  - CloudFront Distribution: ${{ steps.stack-outputs.outputs.distribution_id }}"
          echo ""
          echo "üåê Website URL:"
          cat outputs.json | grep -o '"WebsiteURL": "[^"]*"' | cut -d'"' -f4
